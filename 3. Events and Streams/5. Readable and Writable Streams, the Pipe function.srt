1
00:00:00,000 --> 00:00:06,000
Building on the concept of an EventEmitter is something that Node calls a stream.

2
00:00:06,000 --> 00:00:10,000
A stream extends the EventEmitter class

3
00:00:10,000 --> 00:00:15,000
and implements an agreed-upon set of events and other functions.

4
00:00:15,000 --> 00:00:20,000
These events provide a unified abstraction for dealing with multiple types of dataflow,

5
00:00:20,000 --> 00:00:27,000
including network traffic such as; http and tcp traffic, File I/O,

6
00:00:27,000 --> 00:00:32,000
standard in/out and error, and more.

7
00:00:32,000 --> 00:00:35,000
Each stream is an instance of either a ReadableStream,

8
00:00:35,000 --> 00:00:39,000
meaning something that you would read from, a WriteableStream,

9
00:00:39,000 --> 00:00:43,000
something that you would write to, or both.

10
00:00:43,000 --> 00:00:48,000
Also, because of the standard events and functions exposed in both Readable

11
00:00:48,000 --> 00:00:54,000
and WriteableStreams, a ReadableStream can be piped to a WriteableStream.

12
00:00:54,000 --> 00:00:59,000
This is conceptually similar to piping commands in Unix where the data read

13
00:00:59,000 --> 00:01:03,000
from the ReadableStream is piped to the WriteableStream.

14
00:01:03,000 --> 00:01:06,000
Node handles the backpressure and to address the scenario

15
00:01:06,000 --> 00:01:14,000
where a ReadableStream provides data faster than a WriteableStream can consume it.

16
00:01:14,000 --> 00:01:20,000
The interface of a ReadableStream includes a Boolean indicating whether the stream is

17
00:01:20,000 --> 00:01:26,000
currently readable or not; a series of events that are emitted when new data arrives

18
00:01:26,000 --> 00:01:29,000
or when there is no more data, etc.

19
00:01:29,000 --> 00:01:32,000
; a series of functions to pause, resume,

20
00:01:32,000 --> 00:01:35,000
and destroy the stream; as well as the pipe function.

21
00:01:35,000 --> 00:01:42,000
And the interface to a WriteableStream includes a similar Boolean indicating whether this stream

22
00:01:42,000 --> 00:01:49,000
is currently writeable; events that are emitted such as drain when it is safe to write

23
00:01:49,000 --> 00:01:56,000
to this stream; and pipe when this stream has been passed to a ReadableStream's pipe function;

24
00:01:56,000 --> 00:02:01,000
functions to write data to the stream; and to terminate it.

25
00:02:01,000 --> 00:02:06,000
While you can certainly interact with streams directly by subscribing to events

26
00:02:06,000 --> 00:02:11,000
and invoking functions directly, the real power of streams comes from the pipe function.

27
00:02:11,000 --> 00:02:16,000
Now that we've briefly covered some of the functions and events and Readable

28
00:02:16,000 --> 00:02:23,000
and WriteableStreams, let's see how these work together to provide the pipe functionality.

29
00:02:23,000 --> 00:02:25,000
When you invoke the pipe function on a ReadableStream,

30
00:02:25,000 --> 00:02:29,000
you pass as a parameter the WriteableStream you want to pipe to.

31
00:02:29,000 --> 00:02:33,000
This in turn emits the pipe event on the WriteableStream.

32
00:02:33,000 --> 00:02:40,000
The pipe function then begins an orchestration of events and functions between the two streams.

33
00:02:40,000 --> 00:02:45,000
When data arrives to the ReadableStream, the data event is emitted and the write function

34
00:02:45,000 --> 00:02:48,000
on the WriteableStream is invoked with this data.

35
00:02:48,000 --> 00:02:53,000
If at some point the write function returns a false value indicating

36
00:02:53,000 --> 00:02:56,000
that no more data should be written, the pause function

37
00:02:56,000 --> 00:03:00,000
of the ReadableStream is called "to stop the flow of data."

38
00:03:00,000 --> 00:03:05,000
Then, once the WriteableStream is ready to receive more data, the drain event is emitted

39
00:03:05,000 --> 00:03:09,000
and the resume function on the ReadableStream is invoked.

40
00:03:09,000 --> 00:03:14,000
Once the ReadableStream is finished, the End event is emitted and the End function

41
00:03:14,000 --> 00:03:17,000
on the WriteableStream is invoked.

42
00:03:17,000 --> 00:03:22,000
This elaborate dance happens behind a very simple interface and one that is consistent

43
00:03:22,000 --> 00:03:26,000
across network, file, and process communication.

44
00:03:26,000 --> 00:59:00,000
Let's take a look at some Stream examples.

