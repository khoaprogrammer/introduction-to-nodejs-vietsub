1
00:00:00,000 --> 00:00:05,000
So, in our EventEmitter examples, the first thing we're going to look

2
00:00:05,000 --> 00:00:11,000
at is the first pattern that we talked about on the slides, which is the example

3
00:00:11,000 --> 00:00:16,000
where you actually instantiate an EventEmitter and return it from a function call.

4
00:00:16,000 --> 00:00:26,000
So, here we have a getResource function which takes in a number and returns an instance

5
00:00:26,000 --> 00:00:34,000
of an EventEmitter that emits three events; a Start event, a Data event, and an End event.

6
00:00:34,000 --> 00:00:39,000
This is a good demonstration of how these event names can be really whatever you want.

7
00:00:39,000 --> 00:00:42,000
In our slides we had Item and Done, and Error.

8
00:00:42,000 --> 00:00:46,000
In here we have Start, and Data, and End.

9
00:00:46,000 --> 00:00:49,000
And what we're saying is whenever I see the Start event,

10
00:00:49,000 --> 00:00:51,000
I want you to log this to the console.

11
00:00:51,000 --> 00:00:55,000
And whenever I see the Data event, I want you to log this to the console,

12
00:00:55,000 --> 00:00:57,000
including the data that was sent.

13
00:00:57,000 --> 00:01:01,000
And then, on the End event, let's log this to the console.

14
00:01:01,000 --> 00:01:05,000
And right now I've hidden the code inside this getResource function.

15
00:01:05,000 --> 00:01:08,000
Right now we're focusing on the subscribing part.

16
00:01:08,000 --> 00:01:13,000
But so for now, let's run this and see what we get.

17
00:01:13,000 --> 00:01:14,000
So we'll bring this up here.

18
00:01:14,000 --> 00:01:21,000
And so here you can see we have the I've Started which was the reaction to the Start event.

19
00:01:21,000 --> 00:01:27,000
And then we got five Data events, and one End event that says I'm Done.

20
00:01:27,000 --> 00:01:30,000
Now the five is because we passed in five and that's how many --

21
00:01:30,000 --> 00:01:32,000
that's the way this function is coded.

22
00:01:32,000 --> 00:01:36,000
Whatever number you pass in, that's how many data events you're going to get back.

23
00:01:36,000 --> 00:01:42,000
That was us subscribing to those events and printing something out to the console.

24
00:01:42,000 --> 00:01:48,000
Now let's take a look at the getResource function itself, and see what it does.

25
00:01:48,000 --> 00:01:53,000
Now the first thing that it does is we instantiate a new EventEmitter.

26
00:01:53,000 --> 00:01:58,000
And you'll notice that in order to do that, we had to require an EventEmitter and by doing

27
00:01:58,000 --> 00:02:01,000
that we used Node's built-in events module.

28
00:02:01,000 --> 00:02:05,000
Because we only wanted the EventEmitter from that events module, we specified that as part

29
00:02:05,000 --> 00:02:10,000
of the required and put that in our own EventEmitter variable.

30
00:02:10,000 --> 00:02:17,000
And so we instantiate one of those and then now this process nextTick is something we haven't

31
00:02:17,000 --> 00:02:18,000
seen before.

32
00:02:18,000 --> 00:02:24,000
In our first module we looked at SetTimeOut and SetInterval.

33
00:02:24,000 --> 00:02:31,000
And process nextTick is similar but what it really says is on the very next tick

34
00:02:31,000 --> 00:02:33,000
of the event loop I want you to run this function.

35
00:02:33,000 --> 00:02:38,000
And in this example we're really using that to emulate an asynchronous function

36
00:02:38,000 --> 00:02:41,000
because what we want is we want the return value here

37
00:02:41,000 --> 00:02:48,000
to be called before we start emitting events and as would normally be the case if you were,

38
00:02:48,000 --> 00:02:50,000
you know, talking to file system or a database.

39
00:02:50,000 --> 00:02:57,000
So what we say is, on the next tick of the event loop I want you to emit a Start event.

40
00:02:57,000 --> 00:02:58,000
It's our EventEmitter.

41
00:02:58,000 --> 00:03:00,000
We're emitting a Start event.

42
00:03:00,000 --> 00:03:03,000
And then now we're going to set an Interval.

43
00:03:03,000 --> 00:03:09,000
And what we're saying is, every 10 milliseconds I want you to execute this function.

44
00:03:09,000 --> 00:03:13,000
And then this function we're emitting our Data event.

45
00:03:13,000 --> 00:03:17,000
We're keeping a count of how many Data events we've emitted so far.

46
00:03:17,000 --> 00:03:20,000
We start at zero and then we keep a count.

47
00:03:20,000 --> 00:03:26,000
And if the count is equal to the number that was passed in, we're going to emit an End event

48
00:03:26,000 --> 00:03:30,000
and then clear that interval to stop the function from being executed.

49
00:03:30,000 --> 00:03:35,000
This is an example of the first pattern of using an EventEmitter.

50
00:03:35,000 --> 00:59:00,000
Now let's take a look at the second pattern.

