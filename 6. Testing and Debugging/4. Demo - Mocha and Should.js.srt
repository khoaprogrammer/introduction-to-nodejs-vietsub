1
00:00:00,000 --> 00:00:06,000
So now let's take a look at writing the same tests we showed earlier using the

2
00:00:06,000 --> 00:00:11,000
"assert" module, but now using Mocha and should.js.

3
00:00:11,000 --> 00:00:17,000
So here is that test file, and we'll notice at the top that we are requiring should to bring it

4
00:00:17,000 --> 00:00:21,000
into this program, but we're not requiring Mocha.

5
00:00:21,000 --> 00:00:26,000
Mocha is actually installed globally on our system, and is what we will run

6
00:00:26,000 --> 00:00:31,000
from the command line, but it's not something we explicitly require here.

7
00:00:31,000 --> 00:00:36,000
But it is what provides the describe and it functions here in the tests themselves.

8
00:00:36,000 --> 00:00:38,000
So let's walk through this.

9
00:00:38,000 --> 00:00:43,000
The describe are basically our test suites, and they can be nested.

10
00:00:43,000 --> 00:00:49,000
So here we're saying that I have some tests for mathfun, and the first set of tests is

11
00:00:49,000 --> 00:00:56,000
that when I'm using the module synchronously, and now I'm defining individual tests here.

12
00:00:56,000 --> 00:00:59,000
It should double even numbers correctly.

13
00:00:59,000 --> 00:01:04,000
This is kind of nice because the tester are self documenting and by writing these descriptions,

14
00:01:04,000 --> 00:01:09,000
somebody coming along later should have a pretty good idea of what it's supposed to do,

15
00:01:09,000 --> 00:01:12,000
even if they're still a little new to the code itself.

16
00:01:12,000 --> 00:01:16,000
So I'm saying it should double even numbers correctly.

17
00:01:16,000 --> 00:01:18,000
Here is where should.js comes in.

18
00:01:18,000 --> 00:01:25,000
If I say fun.evendoublersync, and I'm passing in the number two, I can immediately say

19
00:01:25,000 --> 00:01:29,000
on the return value it should and then dot equal four,

20
00:01:29,000 --> 00:01:34,000
so when I call evenDoublerSync two, it's going to return a value.

21
00:01:34,000 --> 00:01:39,000
And I'm simply saying that should equal four, so I can do all that on one line.

22
00:01:39,000 --> 00:01:44,000
Now my next test, I'm saying that on an odd number it should throw an exception.

23
00:01:44,000 --> 00:01:47,000
And so here I'm executing this function,

24
00:01:47,000 --> 00:01:53,000
and I'm saying that that function should throw an exception, and that exception

25
00:01:53,000 --> 00:01:55,000
in the message should have the word odd.

26
00:01:55,000 --> 00:01:58,000
So that regular expression is similar to our last example.

27
00:01:58,000 --> 00:02:04,000
Now in this case, I'm calling a don function, and don is what's passed into my test.

28
00:02:04,000 --> 00:02:08,000
This is the way that we let Mocha know that this particular test is done,

29
00:02:08,000 --> 00:02:13,000
and for our asynchronous tests that we're about to get to don becomes even more important.

30
00:02:13,000 --> 00:02:18,000
So let's look now, we have another test suite here identified by describe,

31
00:02:18,000 --> 00:02:23,000
and we're saying when evenDoubler is used asynchronously,

32
00:02:23,000 --> 00:02:25,000
it should double even numbers correctly.

33
00:02:25,000 --> 00:02:30,000
And here we're calling our asynchronous function evenDoubler,

34
00:02:30,000 --> 00:02:34,000
passing in a two, and an anonymous callback.

35
00:02:34,000 --> 00:02:38,000
And now if you remember from the slides, we mentioned that if you need

36
00:02:38,000 --> 00:02:44,000
to check the existence of a variable, you can use the should function statically,

37
00:02:44,000 --> 00:02:45,000
which is what we're doing in this case.

38
00:02:45,000 --> 00:02:49,000
So we're saying should not exist error.

39
00:02:49,000 --> 00:02:53,000
We couldn't really say error dot should dot not exist because if it was undefined,

40
00:02:53,000 --> 00:02:58,000
then that would blow out the script, but by saying should dot not dot exist error,

41
00:02:58,000 --> 00:03:04,000
we can test to ensure that that doesn't exist, and then the results should equal four.

42
00:03:04,000 --> 00:03:10,000
Now in this case, calling done, which was passed into our test here is our way

43
00:03:10,000 --> 00:03:12,000
of telling Mocha that this test is done.

44
00:03:12,000 --> 00:03:18,000
And throwing down a little further, we'll say that when invoked asynchronously,

45
00:03:18,000 --> 00:03:20,000
it should return an error on an odd number.

46
00:03:20,000 --> 00:03:24,000
And we're calling evenDoubler again, passing in an odd number this time

47
00:03:24,000 --> 00:03:30,000
for our anonymous callback, we're saying that the error should exist,

48
00:03:30,000 --> 00:03:33,000
but the results should not exist, and we're telling it

49
00:03:33,000 --> 00:03:35,000
that after those two assertions, we're done.

50
00:03:35,000 --> 00:03:39,000
And in our case here, since most of our running we've been doing from the run command

51
00:03:39,000 --> 00:03:44,000
at the top, to run Mocha from the command line, what we're actually going to do is go back

52
00:03:44,000 --> 00:03:46,000
to a terminal here in cloud nine.

53
00:03:46,000 --> 00:03:50,000
So here we have a terminal session.

54
00:03:50,000 --> 00:03:56,000
If you're doing this for the first time, you're going to need to install Mocha, and should,

55
00:03:56,000 --> 00:04:04,000
as well, actually, so you'll want to run mpm install dash gmocha to install it globally,

56
00:04:04,000 --> 00:04:09,000
so it'll be available from the command line.

57
00:04:09,000 --> 00:04:12,000
I also need to install the should module, which I just did.

58
00:04:12,000 --> 00:04:22,000
Now let's install Mocha locally.

59
00:04:22,000 --> 00:04:29,000
(Pause) Okay, so now I can run Mocha from the command line

60
00:04:29,000 --> 00:04:33,000
and I get all kinds of usage information back.

61
00:04:33,000 --> 00:04:38,000
So now let's run Mocha against the test that we wrote.

62
00:04:38,000 --> 00:04:42,000
(Typing sounds)

63
00:04:42,000 --> 00:04:47,000
Now you'll see that for the completed tests, we do get some information back there.

64
00:04:47,000 --> 00:04:50,000
It's hard to tell here, but there's four tiny little dots there.

65
00:04:50,000 --> 00:04:54,000
Because we had written four tests, and then at the bottom there's four tests completed,

66
00:04:54,000 --> 00:04:58,000
and how long those tests took to run, but even that might be a little hard to read,

67
00:04:58,000 --> 00:05:04,000
so as we mentioned in the slides, Mocha has multiple ways of outputting the test results.

68
00:05:04,000 --> 00:05:08,000
So let's take a look at another way to report those results.

69
00:05:08,000 --> 00:05:12,000
( Typing on Keyboard )

70
00:05:12,000 --> 00:05:15,000
( Silence )

71
00:05:15,000 --> 00:05:17,000
So here now what we have done is we've said,

72
00:05:17,000 --> 00:05:21,000
I want you to use the reporter called spec, and run the same test.

73
00:05:21,000 --> 00:05:27,000
This is where the strings that we've passed to describe init come in very handy, right,

74
00:05:27,000 --> 00:05:33,000
so it actually prints out that information along with whether each one passed or failed.

75
00:05:33,000 --> 00:05:36,000
And you'll see they all passed, so they all got green checks.

76
00:05:36,000 --> 00:05:41,000
Now we also mentioned that Mocha will time your tests and let you know

77
00:05:41,000 --> 00:05:42,000
if it thinks it's running slowly.

78
00:05:42,000 --> 00:05:46,000
Now you can configure what slowly means, but here we've taken the default.

79
00:05:46,000 --> 00:05:49,000
And going all the way back to Module 2, if you'll remember

80
00:05:49,000 --> 00:05:55,000
that our asynchronous evenDoubler function waits a random amount of time, up to one second.

81
00:05:55,000 --> 00:05:59,000
And so in this case, what it's saying is -- it's printing these in red, saying, look,

82
00:05:59,000 --> 00:06:05,000
383 milliseconds or 659, that's an awful long time, you might want to take a look at that.

83
00:06:05,000 --> 00:06:08,000
So now that we've seen tests that pass, let's take a look at some that fail.

84
00:06:08,000 --> 00:06:12,000
So let's go back and make a couple of these fail.

85
00:06:12,000 --> 00:06:17,000
So we will go back and change our testing of the error message

86
00:06:17,000 --> 00:06:19,000
that comes in when we throw an exception.

87
00:06:19,000 --> 00:06:24,000
So we'll change that, and then let's come back and we'll do the same one we did before.

88
00:06:24,000 --> 00:06:29,000
We'll make this test say that evenDoubler shall return for two should return five,

89
00:06:29,000 --> 00:06:31,000
even though we know that's not true.

90
00:06:31,000 --> 00:06:32,000
It will make that fail.

91
00:06:32,000 --> 00:06:35,000
So let's save this and then run those.

92
00:06:35,000 --> 00:06:40,000
( Silence )

93
00:06:40,000 --> 00:06:41,000
So let's scroll back up.

94
00:06:41,000 --> 00:06:46,000
You see right here, up at the top, we get the green check for the two that passed,

95
00:06:46,000 --> 00:06:48,000
and we get red for the two that failed.

96
00:06:48,000 --> 00:06:52,000
And then in our summary here it says that two of four tests failed.

97
00:06:52,000 --> 00:06:57,000
Now what it's done, as well, is for the two that failed, it has reprinted them

98
00:06:57,000 --> 00:07:01,000
at the bottom here, and included the stack trace with each one.

99
00:07:01,000 --> 00:07:04,000
It says this was the first test that failed, that's why it gives a number one.

100
00:07:04,000 --> 00:07:09,000
It should have thrown in odd numbers, and that comes back down here

101
00:07:09,000 --> 00:07:13,000
and tells us exactly what happened.

102
00:07:13,000 --> 00:07:16,000
It says that we were trying to match odd two, but got odd input.

103
00:07:16,000 --> 00:07:20,000
And then for our second failed test, if we scroll down,

104
00:07:20,000 --> 00:07:22,000
we'll see expected four to equal five.

105
00:07:22,000 --> 00:07:26,000
Much more digestible information coming out of Mocha

106
00:07:26,000 --> 00:07:29,000
than we were getting just from the pure "assert" module.

107
00:07:29,000 --> 00:07:32,000
Not to say you couldn't have continued to add more and more text and verbage and stuff to the

108
00:07:32,000 --> 00:07:34,000
"assert" module, but sticking with something

109
00:07:34,000 --> 00:07:37,000
like Mocha gives you much better output right off the bat.

110
00:07:37,000 --> 00:07:39,000
We'll take a look at one more feature.

111
00:07:39,000 --> 00:07:42,000
You remember when we talked about isolating tests?

112
00:07:42,000 --> 00:07:45,000
And you can do that with "the only."

113
00:07:45,000 --> 00:07:47,000
So for instance, if I'm really wanting to focus

114
00:07:47,000 --> 00:07:53,000
on this particular test right now, I can come in here and put only.

115
00:07:53,000 --> 00:07:58,000
And that is an inclusive test, meaning I only want to run this one test right now.

116
00:07:58,000 --> 00:07:59,000
So let's say that.

117
00:07:59,000 --> 00:08:04,000
Now, I haven't changed anything else in my test suite, just added that only statement.

118
00:08:04,000 --> 00:08:11,000
And (typing sounds) now it just runs that one test.

119
00:08:11,000 --> 00:08:14,000
So that can be handy for focusing on one particular test.

120
00:08:14,000 --> 00:08:20,000
And we can go back and do the opposite, (typing sounds) and tell it we want to skip that test.

121
00:08:20,000 --> 00:08:22,000
And if we run it again...

122
00:08:22,000 --> 00:08:25,000
( Typing )

123
00:08:25,000 --> 00:08:29,000
( Silence )

124
00:08:29,000 --> 00:08:32,000
When you skip it, it actually turns into a pending test.

125
00:08:32,000 --> 00:08:36,000
Had I simply commented that out, I may have forgotten to uncomment it,

126
00:08:36,000 --> 00:08:38,000
and that test would just be gone, basically.

127
00:08:38,000 --> 00:08:43,000
So if it were failing right now, and I said, well, I'm going to get to it in a minute,

128
00:08:43,000 --> 00:08:47,000
I could simply go in and skip it, it will continue to tell me that it's in pending status

129
00:08:47,000 --> 00:08:50,000
to remind me to go back and fix it.

130
00:08:50,000 --> 00:08:54,000
Once you have a few tests written, it can also be fun to experiment with some

131
00:08:54,000 --> 00:08:57,000
of the different reporters that come with Mocha.

132
00:08:57,000 --> 00:09:01,000
Here is one that's there just for fun, which shows your tests represented

133
00:09:01,000 --> 00:09:08,000
as a plane coming in for a landing.

134
00:09:08,000 --> 00:09:11,000
So as you can see, Mocha not only makes writing tests easier.

135
00:09:11,000 --> 00:59:00,000
It can actually make them fun as well.

