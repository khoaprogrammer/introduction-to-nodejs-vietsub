1
00:00:01,000 --> 00:00:06,000
In our very first module of this course, we copied the example web server code

2
00:00:06,000 --> 00:00:11,000
from the node.js.org homepage and used it to stand up a simple server.

3
00:00:11,000 --> 00:00:15,000
Now, we'll take another look at that code and how it leverages many

4
00:00:15,000 --> 00:00:20,000
of the features we've learned so far in this course.

5
00:00:20,000 --> 00:00:23,000
The create server function is passed a single parameter.

6
00:00:23,000 --> 00:00:29,000
The callback to be invoked each time a request is received by the web server.

7
00:00:29,000 --> 00:00:35,000
Optionally if no callback is provided, requests can also be received by listening for events

8
00:00:35,000 --> 00:00:39,000
on the server object that is returned.

9
00:00:39,000 --> 00:00:42,000
Even after the create server function has returned,

10
00:00:42,000 --> 00:00:48,000
the server will not begin accepting HTTP requests until the listen function is called.

11
00:00:48,000 --> 00:00:52,000
This function can be called in several different ways, but the most common is

12
00:00:52,000 --> 00:00:55,000
with an IP port number combination.

13
00:00:55,000 --> 00:01:00,000
When a request is made to the HTTP server

14
00:01:00,000 --> 00:01:04,000
and the callback is invoked, it is passed two parameters.

15
00:01:04,000 --> 00:01:09,000
The first is an instance of server requests, which is a readable stream.

16
00:01:09,000 --> 00:01:14,000
It represents the request being made and for uploads to the server it can be read

17
00:01:14,000 --> 00:01:17,000
from or piped to a writable stream.

18
00:01:17,000 --> 00:01:21,000
The second parameter passed to the callback

19
00:01:21,000 --> 00:01:26,000
on each web request is a server response object, which is a writable stream.

20
00:01:26,000 --> 00:01:30,000
This represents the response sent to the client.

21
00:01:30,000 --> 00:01:36,000
If you are returning steam-oriented data, such as a file from disk, you can pipe that stream

22
00:01:36,000 --> 00:01:40,000
to the server response writable stream.

23
00:01:40,000 --> 00:01:45,000
Support for SSL requests are addressed by a separate HTTPS module,

24
00:01:45,000 --> 00:01:48,000
which has a very similar create server function.

25
00:01:48,000 --> 00:01:54,000
Let's take a look at some examples of using Node's built-in HTTP module

26
00:01:54,000 --> 00:59:00,000
for creating a simple web server.

